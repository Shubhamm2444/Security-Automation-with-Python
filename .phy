import networkx as nx

# Create a network graph object
G = nx.Graph()

# Add nodes representing devices
devices = ["Router", "Server1", "Server2", "Client1", "Client2", "Printer"]
G.add_nodes_from(devices)

# Add edges representing connections between devices
G.add_edge("Router", "Server1")
G.add_edge("Router", "Server2")
G.add_edge("Server1", "Client1")
G.add_edge("Server1", "Printer")
G.add_edge("Server2", "Client2")

# Calculate degree centrality for each node (number of connections)
degree_centrality = nx.degree_centrality(G)

# Print the degree centrality scores for each device
print("Degree Centrality:")
for node, centrality in degree_centrality.items():
  print(f"{node}: {centrality:.2f}")

# (Optional) Visualize the network graph using NetworkX or Matplotlib

print("Network traffic analysis completed!")


** Explanation of the Code:
We import the networkx library.
We create a network graph object using nx.Graph().
We define a list of devices representing nodes in the network.
We add the devices as nodes to the graph using G.add_nodes_from.
We define connections between devices using G.add_edge.
We calculate the degree centrality for each node using nx.degree_centrality.
We loop through the centrality dictionary and print the degree centrality score for each device.
